- hosts: all
  become: yes
  vars:
    username: deploy
    ssh_public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    fail2ban_ignore_ips: "127.0.0.1/8 ::1 {{ ansible_host }}"
    ssh_port: 22
    registry_user: "deploy"
    registry_password: "{{ registry_password }}"
    registry_auth_path: /opt/docker-registry/auth
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install security packages
      apt:
        name:
          - fail2ban
          - ufw
          - unattended-upgrades
          - apt-listchanges
          - apticron
        state: latest

    - name: Create deploy user
      user:
        name: "{{ username }}"
        shell: /bin/bash
        groups: sudo
        append: yes
        state: present

    - name: Authorize SSH key for deploy user
      authorized_key:
        user: "{{ username }}"
        key: "{{ ssh_public_key }}"

    - name: Configure fail2ban
      copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 5
          ignoreip = {{ fail2ban_ignore_ips }}

          [sshd]
          enabled = true
          port = {{ ssh_port }}
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 8
          findtime = 600
          bantime = 3600
      notify: Restart fail2ban

    - name: Allow essential ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "{{ ssh_port }}"
        - "80"
        - "443"
        - "9443"
        - "5000"

    - name: Configure UFW
      ufw:
        state: enabled
        policy: deny
        logging: on

    - name: Enable and start fail2ban
      service:
        name: fail2ban
        state: started
        enabled: yes

    - name: Configure unattended upgrades
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::Package-Blacklist {
          };
          Unattended-Upgrade::DevRelease "auto";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "true";
          Unattended-Upgrade::Automatic-Reboot-Time "02:00";

    - name: Enable automatic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::AutocleanInterval "7";

    - name: Install required packages for Docker
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: latest
        update_cache: yes

    - name: Install Docker using official script
      shell: curl -fsSL https://get.docker.com | sh
      args:
        creates: /usr/bin/docker

    - name: Install other required packages
      apt:
        name:
          - fail2ban
          - ufw
          - unattended-upgrades
        state: latest
        update_cache: yes

    - name: Enable and start Docker
      service:
        name: docker
        state: started
        enabled: true

    - name: Add user to docker group
      user:
        name: "{{ username }}"
        groups: docker
        append: yes

    - name: Create Portainer volume
      command: docker volume create portainer_data
      args:
        creates: /var/lib/docker/volumes/portainer_data

    - name: Create Registry volume
      command: docker volume create registry_data
      args:
        creates: /var/lib/docker/volumes/registry_data

    - name: Run Portainer
      docker_container:
        name: portainer
        image: portainer/portainer-ce:latest
        state: started
        restart_policy: always
        published_ports:
          - "9443:9443"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data
    - name: Configure Docker daemon log rotation
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            },
            "insecure-registries": ["app.narzedziadlatworcow.pl:5000"]
          }
      register: docker_config
      notify: Restart Docker

    - name: Force Docker restart if configuration changed
      service:
        name: docker
        state: restarted
      when: docker_config.changed

    - name: Run Watchtower container
      docker_container:
        name: watchtower
        image: containrrr/watchtower
        state: started
        restart_policy: always
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        command: --cleanup --interval 3600

    - name: Install apache2-utils for htpasswd
      apt:
        name: apache2-utils
        state: present

    - name: Create directory for registry authentication
      file:
        path: "{{ registry_auth_path }}"
        state: directory
        mode: "0755"

    - name: Create registry auth file
      command: "htpasswd -Bbn {{ registry_user }} {{ registry_password }}"
      register: htpasswd_result
      changed_when: false

    - name: Save registry auth file
      copy:
        content: "{{ htpasswd_result.stdout }}"
        dest: "{{ registry_auth_path }}/htpasswd"
        mode: "0600"

    - name: Create Docker registry container
      docker_container:
        name: registry
        image: registry:2
        state: started
        restart_policy: always
        published_ports:
          - "5000:5000"
        env:
          REGISTRY_AUTH: htpasswd
          REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
          REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
        volumes:
          - "{{ registry_auth_path }}:/auth"
          - registry_data:/var/lib/registry

    - name: Create Docker config directory
      file:
        path: /root/.docker
        state: directory
        mode: "0700"

    - name: Configure SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: "^#?PermitRootLogin", line: "PermitRootLogin no" }
        - {
            regexp: "^#?PasswordAuthentication",
            line: "PasswordAuthentication no",
          }
        - {
            regexp: "^#?PubkeyAuthentication",
            line: "PubkeyAuthentication yes",
          }
        - { regexp: "^#?PermitEmptyPasswords", line: "PermitEmptyPasswords no" }
        - { regexp: "^#?X11Forwarding", line: "X11Forwarding no" }
        - { regexp: "^#?MaxAuthTries", line: "MaxAuthTries 3" }
        - { regexp: "^#?LoginGraceTime", line: "LoginGraceTime 30" }
        - { regexp: "^#?ClientAliveInterval", line: "ClientAliveInterval 300" }
        - { regexp: "^#?ClientAliveCountMax", line: "ClientAliveCountMax 2" }
      notify: Restart SSH

    - name: Configure Docker login on server
      shell: echo "{{ registry_password }}" | docker login app.narzedziadlatworcow.pl:5000 --username {{ registry_user }} --password-stdin
      no_log: true

  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: restarted
    - name: Restart fail2ban
      service:
        name: fail2ban
        state: restarted
    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        enabled: true
